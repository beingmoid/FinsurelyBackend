// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PanoramBackend.Data;

namespace PanoramaBackend.Data.Migrations
{
    [DbContext(typeof(AMFContext))]
    [Migration("20221130033850_A1130202020830AM")]
    partial class A1130202020830AM
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Dashboard",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Dashboard",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Dashboard",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Dashboard",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Customer",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Customer",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Customer",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Customer",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Sales Agent",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Sales Agent",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Sales Agent",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Sales Agent",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Insurance Companies",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Insurance Companies",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Insurance Companies",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Insurance Companies",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Sales",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Sales",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Sales",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Sales",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Supplier",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Supplier",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Supplier",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Supplier",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Transactions",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Transactions",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Transactions",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Transactions",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Calender",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Calender",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Calender",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Calender",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Task",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Task",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Task",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Task",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Documents",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Documents",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Documents",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Documents",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "Expenses",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "Expenses",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "Expenses",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "Expenses",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "Accounting",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "Accounting",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "Accounting",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "Accounting",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "Workplace",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "Workplace",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "Workplace",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "Workplace",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "Teams",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "Teams",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "Teams",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "Teams",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "Reports",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "Reports",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "Reports",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "Reports",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "Settings",
                            ClaimValue = "Create",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "Settings",
                            ClaimValue = "Edit",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 63,
                            ClaimType = "Settings",
                            ClaimValue = "View",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        },
                        new
                        {
                            Id = 64,
                            ClaimType = "Settings",
                            ClaimValue = "Delete",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            RoleId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.AccountDetailType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("AccountDetailType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountTypeId = 1,
                            Description = "Accounts Receivable (A/R)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AccountTypeId = 2,
                            Description = "Allowance for bad debits",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            AccountTypeId = 2,
                            Description = "Assets Available for sale",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            AccountTypeId = 2,
                            Description = "Development Cost",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            AccountTypeId = 2,
                            Description = "Employee Cash Advances",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            AccountTypeId = 2,
                            Description = "Inventory",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            AccountTypeId = 2,
                            Description = "Investments - Other",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            AccountTypeId = 2,
                            Description = "Loans To Officers",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            AccountTypeId = 2,
                            Description = "Loans to Others",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            AccountTypeId = 2,
                            Description = "Loans to Shareholders",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 11,
                            AccountTypeId = 2,
                            Description = "Prepaid Expenses",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 12,
                            AccountTypeId = 2,
                            Description = "Retainage",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 13,
                            AccountTypeId = 2,
                            Description = "Undeposited Funds",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 14,
                            AccountTypeId = 3,
                            Description = "Bank",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 15,
                            AccountTypeId = 3,
                            Description = "Cash and cash equivalents",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 16,
                            AccountTypeId = 3,
                            Description = "Cash on hand",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 17,
                            AccountTypeId = 3,
                            Description = "Client trust account",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 18,
                            AccountTypeId = 3,
                            Description = "Money Market",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 19,
                            AccountTypeId = 3,
                            Description = "Rents Held in Trust",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 20,
                            AccountTypeId = 3,
                            Description = "Savings",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 21,
                            AccountTypeId = 4,
                            Description = "Accumulated depletion",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 22,
                            AccountTypeId = 4,
                            Description = "Buildings",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 23,
                            AccountTypeId = 4,
                            Description = "Depletable Assets",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 24,
                            AccountTypeId = 4,
                            Description = "Furniture and Fixtures",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 25,
                            AccountTypeId = 4,
                            Description = "Leasehold Improvements",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 26,
                            AccountTypeId = 4,
                            Description = "Machinery and equipment",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 27,
                            AccountTypeId = 4,
                            Description = "Other fixed assets",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 28,
                            AccountTypeId = 4,
                            Description = "Vehicles",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 29,
                            AccountTypeId = 5,
                            Description = "Accumulated amortisation of non-current assets",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 30,
                            AccountTypeId = 5,
                            Description = "Assets held for sale",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 31,
                            AccountTypeId = 5,
                            Description = "Deferred tax",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 32,
                            AccountTypeId = 5,
                            Description = "Goodwill",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 33,
                            AccountTypeId = 5,
                            Description = "Intangible Assets",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 34,
                            AccountTypeId = 5,
                            Description = "Lease Buyout",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 35,
                            AccountTypeId = 5,
                            Description = "Licences",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 37,
                            AccountTypeId = 5,
                            Description = "Long-term investments",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 38,
                            AccountTypeId = 5,
                            Description = "Organisational Costs",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 39,
                            AccountTypeId = 5,
                            Description = "Other non-current assets",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 40,
                            AccountTypeId = 5,
                            Description = "Security Deposits",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 41,
                            AccountTypeId = 6,
                            Description = "Accounts Payable (A/P)",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 42,
                            AccountTypeId = 7,
                            Description = "Discounts/Refunds Given",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 43,
                            AccountTypeId = 7,
                            Description = "Non-Profit Income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 44,
                            AccountTypeId = 7,
                            Description = "Other Primary Income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 45,
                            AccountTypeId = 7,
                            Description = "SalesInvoice - services",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 46,
                            AccountTypeId = 7,
                            Description = "Unapplied Cash Payment Income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 47,
                            AccountTypeId = 8,
                            Description = "Credit Card",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 48,
                            AccountTypeId = 9,
                            Description = "Accrued liabilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 49,
                            AccountTypeId = 9,
                            Description = "Client Trust Accounts - Liabilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 50,
                            AccountTypeId = 9,
                            Description = "Current Tax Liability",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 51,
                            AccountTypeId = 9,
                            Description = "Current portion of obligations under finance leases",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 52,
                            AccountTypeId = 9,
                            Description = "Dividends payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 53,
                            AccountTypeId = 9,
                            Description = "Income tax payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 54,
                            AccountTypeId = 9,
                            Description = "Insurance payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 55,
                            AccountTypeId = 9,
                            Description = "Line of Credit",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 56,
                            AccountTypeId = 9,
                            Description = "Loan Payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 57,
                            AccountTypeId = 9,
                            Description = "Other current liabilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 58,
                            AccountTypeId = 9,
                            Description = "Payroll Clearing",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 59,
                            AccountTypeId = 9,
                            Description = "Payroll liabilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 60,
                            AccountTypeId = 9,
                            Description = "Prepaid Expenses Payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 61,
                            AccountTypeId = 9,
                            Description = "Rents in trust - Liability",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 62,
                            AccountTypeId = 9,
                            Description = "SalesInvoice and service tax payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 63,
                            AccountTypeId = 10,
                            Description = "Accrued holiday payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 64,
                            AccountTypeId = 10,
                            Description = "Accrued non-current liabilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 65,
                            AccountTypeId = 10,
                            Description = "Liabilities related to assets held for sale",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 66,
                            AccountTypeId = 10,
                            Description = "Long-term debt",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 67,
                            AccountTypeId = 10,
                            Description = "Notes Payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 68,
                            AccountTypeId = 10,
                            Description = "Other non-current liabilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 69,
                            AccountTypeId = 10,
                            Description = "Shareholder Notes Payable",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 70,
                            AccountTypeId = 11,
                            Description = "Accumulated adjustment",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 71,
                            AccountTypeId = 11,
                            Description = "Dividend disbursed",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 72,
                            AccountTypeId = 11,
                            Description = "Opening Balance Equity",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 73,
                            AccountTypeId = 11,
                            Description = "Ordinary shares",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 74,
                            AccountTypeId = 11,
                            Description = "Other comprehensive income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 75,
                            AccountTypeId = 11,
                            Description = "Owner's Equity",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 76,
                            AccountTypeId = 11,
                            Description = "Paid-in capital or surplus",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 77,
                            AccountTypeId = 11,
                            Description = "Partner Contributions",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 78,
                            AccountTypeId = 11,
                            Description = "Partner Distributions",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 79,
                            AccountTypeId = 11,
                            Description = "Partner's Equity",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 80,
                            AccountTypeId = 11,
                            Description = "Preferred shares",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 81,
                            AccountTypeId = 11,
                            Description = "Retained Earnings",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 82,
                            AccountTypeId = 11,
                            Description = "Share capital",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 83,
                            AccountTypeId = 11,
                            Description = "Treasury Shares",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 84,
                            AccountTypeId = 12,
                            Description = "Dividend income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 85,
                            AccountTypeId = 12,
                            Description = "Other Investment Income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 86,
                            AccountTypeId = 12,
                            Description = "Other Miscellaneous Income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 87,
                            AccountTypeId = 12,
                            Description = "Other operating income",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 88,
                            AccountTypeId = 12,
                            Description = "Tax-Exempt Interest",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 89,
                            AccountTypeId = 12,
                            Description = "Unrealised loss on securities, net of tax",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 90,
                            AccountTypeId = 13,
                            Description = "Cost of labour - COS",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 91,
                            AccountTypeId = 13,
                            Description = "Equipment rental - COS",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 92,
                            AccountTypeId = 13,
                            Description = "Freight and delivery - COS",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 93,
                            AccountTypeId = 13,
                            Description = "Other costs of SalesInvoice - COS",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 94,
                            AccountTypeId = 13,
                            Description = "Supplies and materials - COS",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 95,
                            AccountTypeId = 14,
                            Description = "Advertising/Promotional",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 96,
                            AccountTypeId = 15,
                            Description = "Amortisation expense",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 97,
                            AccountTypeId = 14,
                            Description = "Auto",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 98,
                            AccountTypeId = 14,
                            Description = "Bad debts",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 99,
                            AccountTypeId = 14,
                            Description = "Bank charges",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 100,
                            AccountTypeId = 14,
                            Description = "Charitable Contributions",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 101,
                            AccountTypeId = 14,
                            Description = "Commissions and fees",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 102,
                            AccountTypeId = 14,
                            Description = "Cost of Labour",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 103,
                            AccountTypeId = 14,
                            Description = "Dues and Subscriptions",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 104,
                            AccountTypeId = 14,
                            Description = "Equipment rental",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 105,
                            AccountTypeId = 14,
                            Description = "Finance costs",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 106,
                            AccountTypeId = 14,
                            Description = "Income tax expense",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 107,
                            AccountTypeId = 14,
                            Description = "Insurance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 108,
                            AccountTypeId = 14,
                            Description = "Interest paid",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 109,
                            AccountTypeId = 14,
                            Description = "Legal and professional fees",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 110,
                            AccountTypeId = 14,
                            Description = "Loss on discontinued operations, net of tax",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 111,
                            AccountTypeId = 14,
                            Description = "Management compensation",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 112,
                            AccountTypeId = 14,
                            Description = "Meals and entertainment",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 113,
                            AccountTypeId = 14,
                            Description = "Office/General Administrative Expenses",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 114,
                            AccountTypeId = 14,
                            Description = "Other Miscellaneous Service Cost",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 115,
                            AccountTypeId = 14,
                            Description = "Payroll Expenses",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 116,
                            AccountTypeId = 14,
                            Description = "Rent or Lease of Buildings",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 117,
                            AccountTypeId = 14,
                            Description = "Repair and maintenance",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 118,
                            AccountTypeId = 14,
                            Description = "Shipping and delivery expense",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 119,
                            AccountTypeId = 14,
                            Description = "Taxes Paid",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 120,
                            AccountTypeId = 14,
                            Description = "Travel expenses - general and admin expenses",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 121,
                            AccountTypeId = 14,
                            Description = "Travel expenses - selling expense",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 122,
                            AccountTypeId = 14,
                            Description = "Unapplied Cash Bill Payment Expense",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 123,
                            AccountTypeId = 14,
                            Description = "Utilities",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 124,
                            AccountTypeId = 15,
                            Description = "Amortisation",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 125,
                            AccountTypeId = 15,
                            Description = "Depreciation",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 126,
                            AccountTypeId = 15,
                            Description = "Exchange Gain or Loss",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 127,
                            AccountTypeId = 15,
                            Description = "Other Expense",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 128,
                            AccountTypeId = 15,
                            Description = "Penalties and settlements",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AccountType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Accounts Receivable (A/R)",
                            Type = "Assets"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Current Assets",
                            Type = "Assets"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Cash and cash equivalents",
                            Type = "Assets"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Fixed assets",
                            Type = "Assets"
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Non-current assetss",
                            Type = "Assets"
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Accounts Payable (A/P)",
                            Type = "Liablity"
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Income",
                            Type = "Revenues/Income"
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Credit Card",
                            Type = "Liablity"
                        },
                        new
                        {
                            Id = 9,
                            IsDeleted = false,
                            Name = "Current liabilities",
                            Type = "Liablity"
                        },
                        new
                        {
                            Id = 10,
                            IsDeleted = false,
                            Name = "Non-current liabilities",
                            Type = "Liablity"
                        },
                        new
                        {
                            Id = 11,
                            IsDeleted = false,
                            Name = "Owners Equity",
                            Type = "Owner’s equity"
                        },
                        new
                        {
                            Id = 12,
                            IsDeleted = false,
                            Name = "Other income",
                            Type = "Revenues/Income"
                        },
                        new
                        {
                            Id = 13,
                            IsDeleted = false,
                            Name = "Cost of Sales Invoice",
                            Type = "Liablity"
                        },
                        new
                        {
                            Id = 14,
                            IsDeleted = false,
                            Name = "Expense",
                            Type = "Expense"
                        },
                        new
                        {
                            Id = 15,
                            IsDeleted = false,
                            Name = "Other Expense",
                            Type = "Expense"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Accounts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountDetailTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AsOf")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultTaxCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubAccount")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpeningBalanceEquity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool?>("isDeleteApplicable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountDetailTypeId");

                    b.HasIndex("AccountId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountDetailTypeId = 15,
                            Description = "Asset",
                            IsDeleted = false,
                            Name = "Cash Account"
                        },
                        new
                        {
                            Id = 2,
                            AccountDetailTypeId = 15,
                            Description = "Asset",
                            IsDeleted = false,
                            Name = "Test Bank Account"
                        },
                        new
                        {
                            Id = 3,
                            AccountDetailTypeId = 1,
                            Description = "Asset",
                            IsDeleted = false,
                            Name = "Accounts Receivable(A/ R)"
                        },
                        new
                        {
                            Id = 4,
                            AccountDetailTypeId = 41,
                            Description = "Liability",
                            IsDeleted = false,
                            Name = "Accounts Payable(A/ P)"
                        },
                        new
                        {
                            Id = 5,
                            AccountDetailTypeId = 105,
                            Description = "Expense",
                            IsDeleted = false,
                            Name = "Expense"
                        },
                        new
                        {
                            Id = 6,
                            AccountDetailTypeId = 45,
                            Description = "Income",
                            IsDeleted = false,
                            Name = "Sales Account"
                        },
                        new
                        {
                            Id = 7,
                            AccountDetailTypeId = 41,
                            Description = "Liablity",
                            IsDeleted = false,
                            Name = "VAT Payable"
                        },
                        new
                        {
                            Id = 8,
                            AccountDetailTypeId = 81,
                            Description = "Owner's Equity",
                            IsDeleted = false,
                            Name = "Retained Earning"
                        },
                        new
                        {
                            Id = 9,
                            AccountDetailTypeId = 81,
                            Description = "Owner's Equity",
                            IsDeleted = false,
                            Name = "Opening Balance Equity"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.AccountsMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool?>("isMapped")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountsMapping");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FormName = "Sales Agent",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            FormName = "Sales",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            FormName = "Insurance Broker",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            FormName = "Transfer",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AttachmentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BDType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsForBenefit")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsForDeduction")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("BDType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            IsForDeduction = true,
                            Name = "Deduction For Leave"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountHolderName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BankType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("ibanNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetailId");

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Benefits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BenefitAndDeductionId")
                        .HasColumnType("int");

                    b.Property<int>("BenefitTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Occurance")
                        .HasColumnType("int");

                    b.Property<string>("PayStubLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BenefitAndDeductionId");

                    b.HasIndex("BenefitTypeId");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BenefitsAndDeduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApplicableDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Applied")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetailId");

                    b.ToTable("BenefitsAndDeduction");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("BodyType");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BranchAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Compensation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("Effective")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmploymentDetailId")
                        .HasColumnType("int");

                    b.Property<bool?>("Expired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("SalaryAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetailId");

                    b.ToTable("Compensation");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Corrections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReconcilationReportId")
                        .HasColumnType("int");

                    b.Property<int?>("TempId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ReconcilationReportId");

                    b.ToTable("Corrections");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BenefitAndDeductionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DeductionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Occurance")
                        .HasColumnType("int");

                    b.Property<string>("PayStubLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("BenefitAndDeductionId");

                    b.HasIndex("DeductionTypeId");

                    b.ToTable("Deduction");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Documents", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlobFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BlobURI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.EmployeeFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetailId");

                    b.ToTable("EmployeeFiles");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.EmploymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("EmployeeIsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("HiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("EmploymentDetails");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.EmploymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentDetailId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetailId");

                    b.ToTable("EmploymentStatus");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.InsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("InsuranceType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Third Party Liability"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Comprehensive"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.LeaveApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateOfReturn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnnualLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCasualLeave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSickLeave")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDayOfWork")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("LeaveAppoved")
                        .HasColumnType("bit");

                    b.Property<bool>("LeaveIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LeaveNoteFromEmployee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LeaveRejected")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentStatusId");

                    b.ToTable("LeaveApplication");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.LedgarEntries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CreditAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("DebitAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DebitAccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("LedgarEntries");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Login", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CreditAccountId")
                        .HasColumnType("int");

                    b.Property<int?>("DepositAccountId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaymentCredit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaymentDebit")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAgentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TransactionReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreditAccountId");

                    b.HasIndex("DepositAccountId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.PaymentAndBilling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Asof")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PreferredDeliveryMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PreferredPaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("TermsId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PreferredPaymentMethodId");

                    b.HasIndex("TermsId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("PaymentAndBilling");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Cheque"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Debit Card"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Credit Card"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.PolicyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("PolicyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Motor Insurance"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Life Insurance"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.PreferredPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("PreferredPaymentMethod");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Text = "Cash"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Text = "Cheque"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Text = "Debit Card"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Text = "Credit Card"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Priority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "low"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "medium"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "high"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Reconcilation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDifference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("From")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfSalesMissing")
                        .HasColumnType("int");

                    b.Property<int?>("SalesAgentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("SalesAgentId");

                    b.ToTable("Reconcilation");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Refund", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountsId")
                        .HasColumnType("int");

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<decimal>("AmountForBroker")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountForSalesAgent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MessageOnReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageOnStatement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PolicyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RefundDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("VehilcleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountsId");

                    b.HasIndex("AgentId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("InsuranceTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PolicyTypeId");

                    b.HasIndex("VehilcleId");

                    b.ToTable("Refund");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.SaleLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("ActualComission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("CommisionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal?>("Gross")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Net")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PolicyNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PremiumPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("VAT")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("VehilcleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.HasIndex("VehilcleId");

                    b.ToTable("SaleLineItem");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.SalesInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BodyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("CustomerDetailId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("InsuranceCompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("PolicyTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SalesInvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalesInvoicePersonId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UnderWritter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CustomerDetailId");

                    b.HasIndex("InsuranceCompanyId");

                    b.HasIndex("InsuranceTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PolicyTypeId");

                    b.HasIndex("SalesInvoicePersonId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SalesInvoice");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PolicyTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.StaffOffBoarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("DateOfNotice")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastDayOfWork")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentStatusId");

                    b.ToTable("StaffOffBoarding");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "completed"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "inprocess"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "pending"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.TaskTodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AssignedById")
                        .HasColumnType("int");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PriorityId")
                        .HasColumnType("int");

                    b.Property<bool>("SendUpdate")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("StatusId");

                    b.ToTable("TaskTodo");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Teams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Terms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Terms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Text = "Due on recipt"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Text = "Net 15"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Text = "Net 30"
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Text = "Net 60"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("RefundId")
                        .HasColumnType("int");

                    b.Property<int?>("SalesInvoiceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("int");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("RefundId");

                    b.HasIndex("SalesInvoiceId");

                    b.HasIndex("UserDetailId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BillWithParent")
                        .HasColumnType("bit");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("DefaultAccountId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayNameAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAgent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmployee")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsInsuranceCompany")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSubCustomer")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsSupplier")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("OpenBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserDetailId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultAccountId");

                    b.HasIndex("UserDetailId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Company = "Systems Limited",
                            DisplayNameAs = "Moid",
                            FirstName = "Muhamamad",
                            ImageUrl = "https://pbs.twimg.com/profile_images/633202777695514625/tUVSrLDG.jpg",
                            IsDeleted = false,
                            LastName = "Shams",
                            MiddleName = "Moid",
                            Title = "Mr.",
                            UserId = "a18be9c0-aa65-4af8-bd17-00bd9344e575"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.VacationPolicy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnnualLeavesCount")
                        .HasColumnType("int");

                    b.Property<bool>("Applicable")
                        .HasColumnType("bit");

                    b.Property<int>("CasualLeaveCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("EmploymentDetailId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ForYear")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SickLeaveCount")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("EmploymentDetailId");

                    b.ToTable("VacationPolicy");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Make = "Honda Civic",
                            Model = "2010-2020"
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Make = "Toyota Corolla",
                            Model = "2010-2020"
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Make = "Mitsubishi Lancer",
                            Model = "2010-2020"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Data.Repository.ComissionRate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActiveDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNonTpl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTpl")
                        .HasColumnType("bit");

                    b.Property<decimal>("Rates")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserDetailId");

                    b.ToTable("ComissionRate");
                });

            modelBuilder.Entity("PanoramBackend.Services.Data.DTOs.ExtendedRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            ConcurrencyStamp = "b175762b-d1ea-4d3a-9c3d-d3e0f4d3ede4",
                            Name = "Admin",
                            NormalizedName = "Admin"
                        },
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e678",
                            ConcurrencyStamp = "9ae2261c-52ce-4c8a-9f45-750f895da2ef",
                            Name = "CompanyAdmin",
                            NormalizedName = "CompanyAdmin"
                        });
                });

            modelBuilder.Entity("PanoramBackend.Services.Data.DTOs.ExtendedUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-00bd9344e575",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6e1a6c7-810b-4380-b7d9-d7447717dd02",
                            Email = "admin@nukeslab.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@nukeslab.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAEAACcQAAAAEG2O5hjD+H0yYJGYMVieZdwrcsz1V4+IfiI2s/SCOKvsC9dCoM+gsJvWaf8eOs4LGw==",
                            PhoneNumber = "+923400064394",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "moid"
                        });
                });

            modelBuilder.Entity("PanoramaBackend.Data.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnnoucementTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateUserId")
                        .HasColumnName("CreateUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditUserId")
                        .HasColumnName("EditUserId")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Announcement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.AccountDetailType", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.AccountType", "AccountType")
                        .WithMany("AccountDetailTypes")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Accounts", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.AccountDetailType", "AccountDetailType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountDetailTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "Account")
                        .WithMany("SubAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.AccountsMapping", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "Accounts")
                        .WithMany("AccountsMappings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Address", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetails")
                        .WithMany("Addresses")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Attachments", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetails")
                        .WithMany("Attachments")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BDType", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.BDType", "Category")
                        .WithMany("ChildernTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BankDetails", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentDetails", "EmploymentDetails")
                        .WithMany("BankDetails")
                        .HasForeignKey("EmploymentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Benefits", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.BenefitsAndDeduction", "BenefitsAndDeduction")
                        .WithMany("Benefits")
                        .HasForeignKey("BenefitAndDeductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.BDType", "Type")
                        .WithMany("Benefits")
                        .HasForeignKey("BenefitTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.BenefitsAndDeduction", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentDetails", "EmploymentDetails")
                        .WithMany("BenefitsAndDeductions")
                        .HasForeignKey("EmploymentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Compensation", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentDetails", "EmploymentDetails")
                        .WithMany("Compensations")
                        .HasForeignKey("EmploymentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Corrections", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Reconcilation", "Reconcilation")
                        .WithMany("Corrections")
                        .HasForeignKey("ReconcilationReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Deduction", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.BenefitsAndDeduction", "BenefitsAndDeduction")
                        .WithMany("Deduction")
                        .HasForeignKey("BenefitAndDeductionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.BDType", "Type")
                        .WithMany("Deductions")
                        .HasForeignKey("DeductionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.EmployeeFiles", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentDetails", "EmploymentDetails")
                        .WithMany("EmployeeFiles")
                        .HasForeignKey("EmploymentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.EmploymentDetails", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "Manager")
                        .WithMany("ManagerResources")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Teams", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId");

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetails")
                        .WithMany("EmploymentDetails")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.EmploymentStatus", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentDetails", "EmploymentDetails")
                        .WithMany("EmploymentStatus")
                        .HasForeignKey("EmploymentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.LeaveApplication", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentStatus", "EmploymentStatus")
                        .WithMany("LeaveApplications")
                        .HasForeignKey("EmploymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.LedgarEntries", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "CreditAccount")
                        .WithMany("CreditLedgarEntries")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "DebitAccount")
                        .WithMany("DebitLedgarEntries")
                        .HasForeignKey("DebitAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Transaction", "Transaction")
                        .WithMany("LedgarEntries")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Payment", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "CreditAccount")
                        .WithMany("CreditPayment")
                        .HasForeignKey("CreditAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "DepositAccount")
                        .WithMany("DepositPayments")
                        .HasForeignKey("DepositAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "InsuranceCompany")
                        .WithMany("InsuranceCompanyPayment")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "SalesAgent")
                        .WithMany("Payments")
                        .HasForeignKey("SalesAgentId");
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.PaymentAndBilling", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.PreferredPaymentMethod", "PreferredPaymentMethod")
                        .WithMany("PaymentAndBilling")
                        .HasForeignKey("PreferredPaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Terms", "Terms")
                        .WithMany("PaymentAndBilling")
                        .HasForeignKey("TermsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetails")
                        .WithMany("PaymentAndBilling")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Reconcilation", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Documents", "Documents")
                        .WithMany("ReconcilationInsuranceCompany")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "InsuranceCompany")
                        .WithMany("ReconcilationInsuranceCompany")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "SalesAgent")
                        .WithMany("ReconcilationAgents")
                        .HasForeignKey("SalesAgentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Refund", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Accounts", null)
                        .WithMany("Refunds")
                        .HasForeignKey("AccountsId");

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "Agent")
                        .WithMany("AgentRefunds")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "InsuranceCompany")
                        .WithMany("InsuranceCompanyRefunds")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.InsuranceType", "InsuranceType")
                        .WithMany("InsuranceTypeRefunds")
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.PolicyType", "PolicyType")
                        .WithMany()
                        .HasForeignKey("PolicyTypeId");

                    b.HasOne("PanoramBackend.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("RefundsOnVehicles")
                        .HasForeignKey("VehilcleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.SaleLineItem", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.SalesInvoice", "SalesInvoice")
                        .WithMany("SaleLineItem")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.Vehicle", "Vehicle")
                        .WithMany("SaleLineItem")
                        .HasForeignKey("VehilcleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.SalesInvoice", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.BodyType", "BodyType")
                        .WithMany("SalesInvoice")
                        .HasForeignKey("BodyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Branch", "Branch")
                        .WithMany("Sales")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "CustomerDetails")
                        .WithMany("CustomerSalesInvoice")
                        .HasForeignKey("CustomerDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "InsuranceCompany")
                        .WithMany("InsuranceCompanyInvoices")
                        .HasForeignKey("InsuranceCompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.InsuranceType", "InsuranceType")
                        .WithMany("SalesInvoice")
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("SalesInvoice")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.PolicyType", "PolicyType")
                        .WithMany("SalesInvoice")
                        .HasForeignKey("PolicyTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "SalesInvoicePerson")
                        .WithMany("SalesInvoicePersons")
                        .HasForeignKey("SalesInvoicePersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Service", "Service")
                        .WithMany("SalesInvoice")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.StaffOffBoarding", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentStatus", "EmploymentStatus")
                        .WithMany("StaffOffBoardings")
                        .HasForeignKey("EmploymentStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.TaskTodo", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "AssignedBy")
                        .WithMany("AssignedByTask")
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "AssignedTo")
                        .WithMany("AssignedTask")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Priority", "Priority")
                        .WithMany("TaskTodos")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Status", "Status")
                        .WithMany("TaskTodos")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Teams", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "Manager")
                        .WithMany("ManagerTeams")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.Transaction", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.Refund", "Refund")
                        .WithMany("Transactions")
                        .HasForeignKey("RefundId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.SalesInvoice", "SalesInvoice")
                        .WithMany("Transactions")
                        .HasForeignKey("SalesInvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetails")
                        .WithMany("Transactions")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.UserDetails", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.Accounts", "Accounts")
                        .WithMany("UserDetail")
                        .HasForeignKey("DefaultAccountId");

                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetail")
                        .WithMany("Parent")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PanoramBackend.Services.Data.DTOs.ExtendedUser", "ExtendedUser")
                        .WithOne("UserDetails")
                        .HasForeignKey("PanoramBackend.Data.Entities.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PanoramBackend.Data.Entities.VacationPolicy", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.EmploymentDetails", "EmploymentDetails")
                        .WithMany("VacationPolicies")
                        .HasForeignKey("EmploymentDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("PanoramBackend.Data.Repository.ComissionRate", b =>
                {
                    b.HasOne("PanoramBackend.Data.Entities.UserDetails", "UserDetail")
                        .WithMany("ComissionRates")
                        .HasForeignKey("UserDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
